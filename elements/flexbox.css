.item{
    border: 1px solid #222;
    background-color:#777;
    width:100px;
    color:yellow;
    margin:10px;
}

.container{
    display:flex;
    background-color:#CCC;
    border:1px solid black;
    justify-content:space-around;
    align-items:center;
}


.item1{
    height: 50px;
}
.item2{
    height: 100px;
}
.item3{
    height: 150px;
}

/* 
1.flex box uses two dimensions
    the main axes which is from left to right(horizontal)
    cross axes is from top to bottom(vertical axes)


2.justify content
    this is used for the main axes
    controls item to the left right and centre
    by default it's has flex-start
    we can use flex-end
    we can use center to center align them
    space-between brings spaces in between elements
    space-around equal space around elements 


3.align-items
    modifies the cross axes
    by default set to stretch == meaning elements would grow to fill entire space
    thus if we were to set min height on our items they would grow to fill entire space
    we can use flex-start === every element would be at the very top of the parent-element
    we can use flex-end === every element would be at the very bottom of the parent element
    we can use center === places them in the middle(something very difficult to do in css)
    it doesn't have space between cause there's no item above or below them


4.flex-wrap:wrap;
    allow your items to move on to different lines when shrinking when you set it to wrap
    if you don't have this property,element would just shrink in size


5.align-content
    helps to align a flex container's line within it when there's extra space in the cross-axis
    similar to how justify-content aligns individual items within the main-axis.
    this property has no effect when the flexbox has only a single line.
    flex-start: lines packed to the start of the container
    flex-end: lines packed to the end of the container
    center: lines packed to the center of the container
    space-between: lines evenly distributed; the first line is at the start of the container 
    while the last one is at the end
    space-around: lines evenly distributed with equal space between them
    stretch (default): lines stretch to take up the remaining space

6.flex direction
    by default it's row
    column:
    this reverses our main and cross axes
    main axes is top to bottom
    cross axes is left to right
    justify content works now from top to bottom
    align-content works from left to right

7.flex-grow
    this is given to the child element
    you specify a number eg.flex-grow:1;
    this makes the child element take the remaining space in parent element
    you can give flex-grow to a number of child element
    in actual sense the number given to them would act as a ratio

8.flex-basis
    this works hand in hand with flex-grow
    supposing out of the three boxes we gave item2 a flex-basis:0; and same for item3
    this denotes that item one would take it's original size 75px
    then item 2 and 3 share the remainder
    during flex-grow it assumes the both boxes have a width of 0px
    then the remaining space is shared between them in ratio of flex-grow

9.flex-shrink
    by default all items have default shrink of 1
    this is also given to child elements 
    if we give a flex-shrink of 0 items would not shrink
    the higher the number the faster they shrink

10.flex property
    given to child elements
    allows one to define grow shrink and basis all on one line
    flex: 1 0 0;

11.align-self
    given to child elements
    allow us to specify the axis of our child elements
    when we give align-self:flex-start to box one, it moves to the very top of the box




*/