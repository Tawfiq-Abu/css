.item{
    border:1px solid #333;
    background-color:#777;
    color:yellow;
}

.container{
    display:grid;
    grid-template-columns:100px 50px ;
    grid-template-rows:100px 150px;
    grid-auto-rows: 100px;
    grid-template-areas: 
        "header header"
        "side content"
        "footer footer"    
    ;
}
.item1{
    grid-area: header;
}

.item3{
    grid-area: content;
}
.item2{
    grid-area:footer;
}



/* 
grid
    grid works like block level elements thus places items on top of the other
    grid is two dimensional
    https://css-tricks.com/snippets/css/complete-guide-grid/

1.grid-template-columns:100px 200px etc.;
    this is to denote the number of columns you want and the width of each column
    if you were to give 6 values it would create colums of six for you
    nb. columns are horizontal

2. grid-template-rows:50px 100px;
    this denotes how many row and the height of each row

3. grid-template:100px 200px/100ox 80px;
    this is a shorthand for denoting colums and rows
    grid rows take the first values
    then separated by a /
    then grid colums take the second values

4.grid-auto-rows:40px;
    this is used to denote the value of any row that we dont define
    if we only gave values for say two rows and we have more 
    it'll automatically take the value specified in this property
    it's auto by default
    we can give it multiple values 
    say we had two values for it grid-auto-rows:40px 50px;
    and six undefined rows
    the first would take 40px second 50px and the third would come back to 40px in that order
    it essentially cycles through them

5.grid-auto-colums:50px;
    essentially works like the grid-auto-rows
    defines values for all extra colums
    for this to work sometimes we need to set grid-auto-flow to column

6.grid-auto-flow:row;
    this denotes where new elements should be added when not specified in grid-template
    that's grid-template-row/column
    by default it's set to row
7.grid-template-areas: 
            "a a a"
            "b c c"
            "b c c";

            say you have three items of a b and c
            The grid-template-areas CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.
            so essentially what we've done is to give the first three colums to item a
            first colum in second row to b and the rest c
            and first colum in third row item b and the rest c
            a would span over the first three columns
            b would take a column and span over two rows
            and c would span over two colums and two rows
            this would work when the individual items are given a grid-area property 
            value should be inside of quotes

            grid-template-areas: 
            "a a ."
            "a a ."
            ". b c";
            the periods denote that after the value a has span over the two columns
            there can be any item over there
            without the periods the grid layouts can be messed up

8.grid-area:value;
    given to individual items in the grid
    use names that has been specified in grid-template-area
    value should not be inside of quotes

9.grid-column-start:1;
  grid-colum-end:3;
  grid-row-start:1;
  grid-row-end:3;
    grid-column-start / grid-row-start is the line where the item begins, and grid-column-end / grid-row-end is the line where the item ends.
    

10. the fr properties in grid-template-columns
    usage grid-template-columns: 1fr 2fr 1fr;
    this means that first colums should take 1fraction of the total length and it continues it that format

11.the repeat function 
    if we wanted 4 equal columns in grid 
    we'd have done  grid-template-columns: 1fr 1fr 1fr 1fr;
    but with the repeate we just do grid-template-columns:repeat(4,1fr);
    we can also do grid-template-columns: 50px repeat(2,100px) 50px;


12.minmax function
    say in our first box we had the content to be spilling out of the box
    normally spills out of the row
    so we can do grid-template-rows:minmax(50px,auto)
    this means the minimum size should be 50px
    maximum size should be auto meaning grow to contain your content


13.row-gap:10px
column-gap:20px
gap:15px
    this essentially puts gaps between all rows if specified and columns if specified
    the gap property puts the specified gaps between alll rows and columns

14.justify-content

    Sometimes the total size of your grid might be less than the size of its grid container. This could happen if all of your grid items are sized with non-flexible units like px. In this case you can set the alignment of the grid within the grid container. This property aligns the grid along the inline (row) axis (as opposed to align-content which aligns the grid along the block (column) axis).

    Values:

    start – aligns the grid to be flush with the start edge of the grid container
    end – aligns the grid to be flush with the end edge of the grid container
    center – aligns the grid in the center of the grid container
    stretch – resizes the grid items to allow the grid to fill the full width of the grid container
    space-around – places an even amount of space between each grid item, with half-sized spaces on the far ends
    space-between – places an even amount of space between each grid item, with no space at the far ends
    space-evenly – places an even amount of space between each grid item, including the far ends


15.align-content
    Sometimes the total size of your grid might be less than the size of its grid container. This could happen if all of your grid items are sized with non-flexible units like px. In this case you can set the alignment of the grid within the grid container. This property aligns the grid along the block (column) axis (as opposed to justify-content which aligns the grid along the inline (row) axis).
    your grid needs to have a height before it'll work

    Values:

    start – aligns the grid to be flush with the start edge of the grid container
    end – aligns the grid to be flush with the end edge of the grid container
    center – aligns the grid in the center of the grid container
    stretch – resizes the grid items to allow the grid to fill the full height of the grid container
    space-around – places an even amount of space between each grid item, with half-sized spaces on the far ends
    space-between – places an even amount of space between each grid item, with no space at the far ends
    space-evenly – places an even amount of space between each grid item, including the far ends

16.align-items

    Aligns grid items along the block (column) axis (as opposed to justify-items which aligns along the inline (row) axis). This value applies to all grid items inside the container.

    Values:

    stretch – fills the whole height of the cell (this is the default)
    start – aligns items to be flush with the start edge of their cell
    end – aligns items to be flush with the end edge of their cell
    center – aligns items in the center of their cell
    baseline – align items along text baseline. There are modifiers to baseline — first baseline and last baseline which will use the baseline from the first or last line in the case of multi-line text.

17.justify-items
    Aligns grid items along the inline (row) axis (as opposed to align-items which aligns along the block (column) axis). This value applies to all grid items inside the container.

    Values:

    start – aligns items to be flush with the start edge of their cell
    end – aligns items to be flush with the end edge of their cell
    center – aligns items in the center of their cell
    stretch – fills the whole width of the cell (this is the default)
    
 18.align-self and justify-self
    given to individual items in the flex container   

*/
