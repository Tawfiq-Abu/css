.item{
    border:1px solid #333;
    background-color:#777;
    color:yellow;
}

.container{
    display:grid;
    grid-template-columns:100px 50px ;
    grid-template-rows:100px 150px;
    grid-auto-rows: 100px;
    grid-template-areas: 
        "header header"
        "side content"
        "footer footer"    
    ;
}
.item1{
    grid-area: header;
}

.item3{
    grid-area: content;
}
.item2{
    grid-area:footer;
}



/* 
grid
    grid works like block level elements thus places items on top of the other
    grid is two dimensional

1.grid-template-columns:100px 200px etc.;
    this is to denote the number of columns you want and the width of each column
    if you were to give 6 values it would create colums of six for you
    nb. columns are horizontal

2. grid-template-rows:50px 100px;
    this denotes how many row and the height of each row

3. grid-template:100px 200px/100ox 80px;
    this is a shorthand for denoting colums and rows
    grid rows take the first values
    then separated by a /
    then grid colums take the second values

4.grid-auto-rows:40px;
    this is used to denote the value of any row that we dont define
    if we only gave values for say two rows and we have more 
    it'll automatically take the value specified in this property
    it's auto by default
    we can give it multiple values 
    say we had two values for it grid-auto-rows:40px 50px;
    and six undefined rows
    the first would take 40px second 50px and the third would come back to 40px in that order
    it essentially cycles through them

5.grid-auto-colums:50px;
    essentially works like the grid-auto-rows
    defines values for all extra colums
    for this to work sometimes we need to set grid-auto-flow to column

6.grid-auto-flow:row;
    this denotes where new elements should be added when not specified in grid-template
    that's grid-template-row/column
    by default it's set to row
7.grid-template-areas: 
            "a a a"
            "b c c"
            "b c c";

            say you have three items of a b and c
            The grid-template-areas CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.
            so essentially what we've done is to give the first three colums to item a
            first colum in second row to b and the rest c
            and first colum in third row item b and the rest c
            a would span over the first three columns
            b would take a column and span over two rows
            and c would span over two colums and two rows
            this would work when the individual items are given a grid-area property 
            value should be inside of quotes

            grid-template-areas: 
            "a a ."
            "a a ."
            ". b c";
            the periods denote that after the value a has span over the two columns
            there can be any item over there
            without the periods the grid layouts can be messed up

8.grid-area:value;
    given to individual items in the grid
    use names that has been specified in grid-template-area
    value should not be inside of quotes

*/